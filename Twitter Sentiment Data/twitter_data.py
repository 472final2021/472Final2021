# -*- coding: utf-8 -*-
"""Twitter_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZM3BbDYRcq4NlUsEVkWO1bR47UvhBs0f

## Tickers With Positive Sentiment Scores from Twitter

### References:
#### VaderSentiment
Hutto, C.J. & Gilbert, E.E. (2014). VADER: A Parsimonious Rule-based Model for Sentiment Analysis of Social Media Text. Eighth International Conference on Weblogs and Social Media (ICWSM-14). Ann Arbor, MI, June 2014.

#### Tweepy
https://docs.tweepy.org/en/latest/


### Note:
Please do not run the following code, as our Twitter tweet / request allocation is nearly maxed out due to limitations placed on the free version of Twitter Premium API access.

### Install Necesary Libraries
"""

pip install tweepy

pip install --upgrade git+https://github.com/tweepy/tweepy@master

pip install vaderSentiment

"""### Gain Access to Twitter / Tweets"""

import tweepy
import vaderSentiment as vs
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import bs4 as bs
import requests
import pandas as pd
from datetime import datetime, timedelta

#auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth = tweepy.OAuthHandler("UNaMoG2j6OwcX3qVPGMolqy1l", "f0F0Cy0bILqXB3jrnkKpwj6Bthz4ZDuBHGS8UzDqcQDOcyStJ5")
#auth.set_access_token(key, secret)
auth.set_access_token("1392184312636878857-Z2TOHvpkAr2z4ahpeZ8VMO0Jix0zv6", "FCX64yUkWHKkiZyxCnEDRdyMhFQim8iRQWvwm9x24sYDE")

api = tweepy.API(auth, wait_on_rate_limit=True)

"""### Get Related Tweets to Find Top 3 Companies """

hashtag = "#stocks"
date_until = datetime.strptime('02/02/2021', "%m/%d/%Y")
date_since = datetime.strptime('02/01/2021', "%m/%d/%Y")
trading_tweets = []

for i in range(0, 7):
  if len(str(date_since.month)) < 2:
    since_month = '0'+str(date_since.month)
  else:
    since_month = str(date_since.month)
  if len(str(date_until.month)) < 2:
    until_month = '0'+str(date_until.month)
  else:
    until_month = str(date_until.month)
  if len(str(date_until.day)) < 2:
    until_day = '0'+str(date_until.day)
  else:
    until_day = str(date_until.day)
  if len(str(date_since.day)) < 2:
    since_day = '0'+str(date_since.day)
  else:
    since_day = str(date_since.day)
  str_since = str(date_since.year) + since_month + since_day + '0000'
  str_until = str(date_until.year) + until_month + until_day + '0000'
  print(str_until)
  trading_tweets_temp = list(tweepy.Cursor(api.search_full_archive,label='cmsc472final', query=hashtag, fromDate=str_since, toDate=str_until).items(100))
  date_until += timedelta(days=1)
  trading_tweets.append(trading_tweets_temp)

"""### Combine All 7 Days of Tweets Into One List / Get Text"""

trading_tweets_text = []
for i in range(0, len(trading_tweets)):
  trading_tweets[i] = list(trading_tweets[i])
trading_tweets = [item for sublist in trading_tweets for item in sublist]
print(trading_tweets[0].text)
print(len(trading_tweets))
for i in range(0, len(trading_tweets)):
  trading_tweets_text.append(trading_tweets[i].text)
#print(trading_tweets_text[0])

"""### Get Company Tickers From tickers.csv File Linked Above"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd /content/drive/My\ Drive/

ticker_table = pd.read_csv('tickers.csv')

list_tickers = []
for ind in ticker_table.index:
  list_tickers.append('$'+ticker_table['Symbol'][ind]+ ' ')

print(list_tickers)

"""### Make A Dictionary {'ticker' : [tweets about ticker]}"""

ticker_tweets = {}

for k in range(0, len(list_tickers)):
  ticker_tweets[list_tickers[k]] = []

print(ticker_tweets)
for i in range(0, len(trading_tweets_text)):
  for j in range(0, len(list_tickers)):
    if list_tickers[j] in trading_tweets_text[i]:
      ticker_tweets[list_tickers[j]].append(trading_tweets[i])

"""### Find Top 3 Most Mentioned Companies"""

max1 = 0
max1_comp = ''
max2 = 0
max2_comp = ''
max3 = 0
max3_comp = ''
for key in ticker_tweets.keys():
  list_len = len(ticker_tweets[key])
  if list_len > max1:
    max3 = max2
    max3_comp = max2_comp
    max2 = max1
    max2_comp = max1_comp
    max1 = list_len
    max1_comp = key
  elif list_len > max2:
    max3 = max2
    max3_comp = max2_comp
    max2 = list_len
    max2_comp = key
  elif list_len > max3:
    max3 = list_len
    max3_comp = key

print(max1_comp)
print(max1)
print(max2_comp)
print(max2)
print(max3_comp)
print(max3)

"""### Get Tweets About Each Company (Top 100 Tweets Per Day)"""

date_until = datetime.strptime('02/02/2021', "%m/%d/%Y")
date_since = datetime.strptime('02/01/2021', "%m/%d/%Y")
max1_tweets = []

for i in range(0, 7):
  if len(str(date_since.month)) < 2:
    since_month = '0'+str(date_since.month)
  else:
    since_month = str(date_since.month)
  if len(str(date_until.month)) < 2:
    until_month = '0'+str(date_until.month)
  else:
    until_month = str(date_until.month)
  if len(str(date_until.day)) < 2:
    until_day = '0'+str(date_until.day)
  else:
    until_day = str(date_until.day)
  if len(str(date_since.day)) < 2:
    since_day = '0'+str(date_since.day)
  else:
    since_day = str(date_since.day)
  str_since = str(date_since.year) + since_month + since_day + '0000'
  str_until = str(date_until.year) + until_month + until_day + '0000'
  print(str_until)
  trading_tweets_temp = list(tweepy.Cursor(api.search_full_archive,label='cmsc472final', query=max1_comp[1:], fromDate=str_since, toDate=str_until).items(100))
  date_until += timedelta(days=1)
  max1_tweets.append(trading_tweets_temp)

hashtag = max2_comp[1:]
date_until = datetime.strptime('02/02/2021', "%m/%d/%Y")
date_since = datetime.strptime('02/01/2021', "%m/%d/%Y")
max2_tweets = []

for i in range(0, 7):
  if len(str(date_since.month)) < 2:
    since_month = '0'+str(date_since.month)
  else:
    since_month = str(date_since.month)
  if len(str(date_until.month)) < 2:
    until_month = '0'+str(date_until.month)
  else:
    until_month = str(date_until.month)
  if len(str(date_until.day)) < 2:
    until_day = '0'+str(date_until.day)
  else:
    until_day = str(date_until.day)
  if len(str(date_since.day)) < 2:
    since_day = '0'+str(date_since.day)
  else:
    since_day = str(date_since.day)
  str_since = str(date_since.year) + since_month + since_day + '0000'
  str_until = str(date_until.year) + until_month + until_day + '0000'
  print(str_until)
  trading_tweets_temp = list(tweepy.Cursor(api.search_full_archive,label='cmsc472final', query=hashtag, fromDate=str_since, toDate=str_until).items(100))
  date_until += timedelta(days=1)
  max2_tweets.append(trading_tweets_temp)

hashtag = max3_comp[1:]
date_until = datetime.strptime('02/02/2021', "%m/%d/%Y")
date_since = datetime.strptime('02/01/2021', "%m/%d/%Y")
max3_tweets = []

for i in range(0, 7):
  if len(str(date_since.month)) < 2:
    since_month = '0'+str(date_since.month)
  else:
    since_month = str(date_since.month)
  if len(str(date_until.month)) < 2:
    until_month = '0'+str(date_until.month)
  else:
    until_month = str(date_until.month)
  if len(str(date_until.day)) < 2:
    until_day = '0'+str(date_until.day)
  else:
    until_day = str(date_until.day)
  if len(str(date_since.day)) < 2:
    since_day = '0'+str(date_since.day)
  else:
    since_day = str(date_since.day)
  str_since = str(date_since.year) + since_month + since_day + '0000'
  str_until = str(date_until.year) + until_month + until_day + '0000'
  print(str_until)
  trading_tweets_temp = list(tweepy.Cursor(api.search_full_archive,label='cmsc472final', query=hashtag, fromDate=str_since, toDate=str_until).items(100))
  date_until += timedelta(days=1)
  max3_tweets.append(trading_tweets_temp)

"""### Flatten Lists """

max1_tweets = [item for sublist in max1_tweets for item in sublist]
max2_tweets = [item for sublist in max2_tweets for item in sublist]
max3_tweets = [item for sublist in max3_tweets for item in sublist]
print(max1_tweets[0])

"""### Get Sentiment Score Per Tweet Per Ticker and Create Dictionary: {ticker: ([scores],[dates])}"""

analyzer = SentimentIntensityAnalyzer()
max1_scores = ([],[])
max2_scores = ([],[])
max3_scores = ([],[])

for i in range(0, len(max1_tweets)):
  score_dict = analyzer.polarity_scores(max1_tweets[i].text)
  max1_scores[0].append(score_dict['compound'])
  max1_scores[1].append((max1_tweets[i].created_at).date())

for i in range(0, len(max2_tweets)):
  score_dict = analyzer.polarity_scores(max2_tweets[i].text)
  max2_scores[0].append(score_dict['compound'])
  max2_scores[1].append((max2_tweets[i].created_at).date())

for i in range(0, len(max3_tweets)):
  score_dict = analyzer.polarity_scores(max3_tweets[i].text)
  max3_scores[0].append(score_dict['compound'])
  max3_scores[1].append((max3_tweets[i].created_at).date())

print(max3_scores[1]) # -1 is most negative, 1 is most positive

compound_scores = {max1_comp: max1_scores,
                   max2_comp: max2_scores,
                   max3_comp: max3_scores}

by_comp_by_day = {}

for ticker in compound_scores.keys():
  scores = compound_scores[ticker][0]
  dates = compound_scores[ticker][1]

  mini_dict = {}  ## {date: [raw scores]}
  for i in range(0, len(dates)):
    if dates[i] in mini_dict.keys():
      mini_dict[dates[i]].append(scores[i])
    else:
      mini_dict[dates[i]] = [scores[i]]
  
  mini_scores_dict = {} ## {date: binary score}
  for key in mini_dict.keys():
    mini_scores = mini_dict[key]
    mean = 0
    for j in range(0, len(mini_scores)):
      mean = mean + mini_scores[j] / len(mini_scores)
    mini_scores_dict[key] = mean

  by_comp_by_day[ticker] = mini_scores_dict

by_comp_by_day

"""### Create Lists to be Columns of Dataframe For Score Per Day Per Ticker"""

big_ticker_list = []
big_dates_list = []
big_scores_list = []

for key in by_comp_by_day.keys():
  dates = list(by_comp_by_day[key].keys())
  scores = list(by_comp_by_day[key].values())
  for i in range(0, len(dates)):
    big_ticker_list.append(key)
    big_dates_list.append(dates[i])
    big_scores_list.append(scores[i])

print(len(big_scores_list))
print(len(big_ticker_list))
print(len(big_dates_list))

"""### Create Dataframe Containing Above Information"""

data = {'Tickers':big_ticker_list,
        'Dates':big_dates_list,
        'Scores':big_scores_list}
twitter_frames = pd.DataFrame(data)
twitter_frames

"""RAN: twitter_frames.to_csv('twitter_df.csv')

LINK: https://drive.google.com/file/d/1x5MbWRX1cpkeJQLPT360rUl7fhcaUzBG/view?usp=sharing
"""

!pip install yfinance

from matplotlib import pyplot as plt
import yfinance as yf
from pandas_datareader import data as pdr

tickerDataTSLA = yf.Ticker('TSLA')
yf.pdr_override()
TSLA_df = pdr.get_data_yahoo("TSLA", start="2021-02-01", end="2021-2-09")
TSLA_df['Adj Close'].plot(label='TSLA', figsize=(8,4), title='TSLA Stock Price')

tickerDataGME = yf.Ticker('GME')
yf.pdr_override()
GME_df = pdr.get_data_yahoo("GME", start="2021-02-01", end="2021-2-09")
GME_df['Adj Close'].plot(label='GME', figsize=(8,4), title='GME Stock Price')

tickerDataAMZN = yf.Ticker('AMZN')
yf.pdr_override()
AMZN_df = pdr.get_data_yahoo("AMZN", start="2021-02-01", end="2021-2-09")
AMZN_df['Adj Close'].plot(label='AMZN', figsize=(8,4), title='AMZN Stock Price')

